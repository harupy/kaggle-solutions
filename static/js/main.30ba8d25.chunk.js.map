{"version":3,"sources":["AuthorPopup.tsx","constants.ts","SolutionsList.tsx","TagsList.tsx","CompetitionsTable.tsx","utils.ts","StarCounter.tsx","Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AuthorPopup","children","solution","authorName","authorId","avatarImage","authorUrl","avatarUrl","renderContent","style","textAlign","alt","src","height","width","href","Popup","trigger","content","position","hoverable","SolutionsList","competitionUrl","solutions","List","map","sol","key","discussionId","Item","title","TagsList","tags","Label","Group","tag","CompetitionsTable","competitions","data","useState","searchTerm","setSearchTerm","mapper","rewardDisplay","evaluationMetric","enabledDate","deadline","totalTeams","Input","label","onChange","event","preventDefault","target","value","Message","compact","positive","size","marginLeft","Table","celled","Header","Row","Object","values","val","idx","HeaderCell","undefined","Body","filter","comp","competitionTitle","toLowerCase","includes","competitionId","dateString","Date","now","parse","Cell","thumbnailImageUrl","rel","categories","tagUrl","split","pop","keys","isDateKey","slice","formatDate","GitHubLink","url","starCount","setStarCount","useEffect","a","async","user","repo","API_URL","fetch","resp","ok","Error","status","statusText","json","console","log","stargazers_count","fetchStarCount","Icon","name","verticalAlign","Menu","borderless","inverted","fixed","backgroundColor","color","fontWeight","as","StarCounter","App","Container","fluid","paddingTop","paddingLeft","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30ba8d25.chunk.js","sourcesContent":["import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { Solution } from './CompetitionsTable';\nimport { KAGGLE_URL, AVATAR_URL } from './constants';\n\ninterface AuthorPopupProps {\n  children: React.ReactNode;\n  solution: Solution;\n}\n\nconst AuthorPopup: React.SFC<AuthorPopupProps> = ({ children, solution }) => {\n  const { authorName, authorId, avatarImage } = solution;\n  const authorUrl = `${KAGGLE_URL}/${authorId}`;\n  const avatarUrl = `${AVATAR_URL}/${avatarImage}`;\n\n  const renderContent = (\n    <div style={{ textAlign: 'center' }}>\n      <img alt={authorName} src={avatarUrl} style={{ height: 64, width: 64 }} />\n      <br />\n      <a href={authorUrl}>{authorName}</a>\n    </div>\n  );\n\n  return <Popup trigger={children} content={renderContent} position=\"left center\" hoverable />;\n};\n\nexport default AuthorPopup;\n","// colors\nexport const KAGGLE_BLUE = '#20BEFF';\nexport const KAGGLE_GRAY = 'rgba(0, 0, 0, 0.7)';\n\n// URLs\nexport const KAGGLE_URL = 'https://kaggle.com';\nexport const AVATAR_URL = 'https://storage.googleapis.com/kaggle-avatars/thumbnails';\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport AuthorPopup from './AuthorPopup';\nimport { KAGGLE_URL } from './constants';\nimport { Solution } from './CompetitionsTable';\n\ninterface SolutionsListProps {\n  competitionUrl: string;\n  solutions: Solution[];\n}\n\nconst SolutionsList: React.SFC<SolutionsListProps> = ({ competitionUrl, solutions }) => {\n  return (\n    <List>\n      {solutions.map(sol => (\n        <AuthorPopup key={`${competitionUrl}-${sol.discussionId}`} solution={sol}>\n          <List.Item>\n            <a href={`${KAGGLE_URL}${competitionUrl}/discussion/${sol.discussionId}`}>\n              {sol.title}\n            </a>\n          </List.Item>\n        </AuthorPopup>\n      ))}\n    </List>\n  );\n};\n\nexport default SolutionsList;\n","import React from 'react';\nimport { Label } from 'semantic-ui-react';\n\ninterface TagsListProps {\n  tags: (string | undefined)[];\n}\n\nconst TagsList: React.SFC<TagsListProps> = ({ tags }) => {\n  return <Label.Group>{tags.map(tag => tag && <Label key={tag}>{tag}</Label>)}</Label.Group>;\n};\n\nexport default TagsList;\n","import React, { useState } from 'react';\nimport data from './competitions.json';\nimport { Table, Input, Message } from 'semantic-ui-react';\n\nimport SolutionsList from './SolutionsList';\nimport TagsList from './TagsList';\nimport { formatDate, isDateKey, basename, isDateOver } from './utils';\n\nexport interface Solution {\n  title: string;\n  discussionId: number;\n  authorName: string;\n  authorId: string;\n  avatarImage: string;\n}\n\ninterface Competition {\n  [key: string]: any;\n  competitionTitle: string;\n  competitionUrl: string;\n  competitionId: number;\n  thumbnailImageUrl: string;\n  rewardDisplay: string;\n  evaluationMetric: string;\n  enabledDate: string;\n  deadline: string;\n  totalTeams: number;\n  categories: {\n    categories: { tagUrl: string }[];\n  };\n  solutions?: Solution[];\n}\n\nconst CompetitionsTable: React.FC = () => {\n  const competitions: Competition[] = [...data];\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const mapper: { [key: string]: string } = {\n    rewardDisplay: 'Reward [USD]',\n    evaluationMetric: 'Metric',\n    enabledDate: 'Start',\n    deadline: 'End',\n    totalTeams: '# of Teams',\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    event.preventDefault();\n    setSearchTerm(event.target.value);\n  };\n\n  const search = (): Competition[] =>\n    competitions.filter(comp => {\n      return comp.competitionTitle.toLowerCase().includes(searchTerm.toLowerCase());\n    });\n\n  return (\n    <div>\n      <Input label=\"Search Competition\" onChange={handleChange} />\n      <Message compact positive size=\"mini\" style={{ marginLeft: 10 }}>\n        Colored competitions are ongoing.\n      </Message>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            {['Logo', 'Title', 'Tags', 'Solutions', ...Object.values(mapper)].map((val, idx) => (\n              <Table.HeaderCell textAlign={idx === 0 ? 'center' : undefined} key={val}>\n                {val}\n              </Table.HeaderCell>\n            ))}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {search().map(comp => (\n            <Table.Row key={comp.competitionId} positive={!isDateOver(comp.deadline)}>\n              {/* competition logo */}\n              <Table.Cell textAlign=\"center\">\n                <img src={comp.thumbnailImageUrl} alt=\"\" style={{ height: 100 }} />\n              </Table.Cell>\n              {/* competition link */}\n              <Table.Cell>\n                {/* Note that `competitionUrl` starts with \"/\" */}\n                <a\n                  href={`https://kaggle.com${comp.competitionUrl}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {comp.competitionTitle}\n                </a>\n              </Table.Cell>\n              <Table.Cell>\n                <TagsList tags={comp.categories.categories.map(({ tagUrl }) => basename(tagUrl))} />\n              </Table.Cell>\n              <Table.Cell style={{ width: 200 }}>\n                <SolutionsList\n                  competitionUrl={comp.competitionUrl}\n                  solutions={comp.solutions ? comp.solutions : []}\n                />\n              </Table.Cell>\n              {Object.keys(mapper).map(key => (\n                <Table.Cell key={key}>\n                  {isDateKey(key) ? formatDate(comp[key]) : comp[key]}\n                </Table.Cell>\n              ))}\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default CompetitionsTable;\n","/**\n * Extract yyyy-mm-dd.\n * @param  {string} dateString date string to format.\n * @return {string} Formatted date string.\n */\nexport const formatDate = (dateString: string): string => {\n  return dateString.slice(0, 10);\n};\n\n/**\n * Return true if the given key is 'deadline' or 'enabledDate'.\n * @param  {string} key key to check.\n * @return {boolean}\n */\nexport const isDateKey = (key: string): boolean => {\n  return ['deadline', 'enabledDate'].includes(key);\n};\n\n/**\n * Return the base name of the given path or url.\n * @param  {string} s File path or URL.\n * @return {string} Base name.\n */\nexport const basename = (s: string): string | undefined => {\n  return s.split(/[\\\\/]/).pop();\n};\n\n/**\n * Check if the given date time is over.\n * @param {string} dateString Date string to check.\n * @return {boolean} True if the given date time is over.\n */\n\nexport const isDateOver = (dateString: string): boolean => {\n  return Date.now() >= Date.parse(dateString);\n};\n","import React, { useState, useEffect } from 'react';\nimport { Icon } from 'semantic-ui-react';\n\ninterface StarCounterProps {\n  url: string;\n}\n\nconst GitHubLink: React.FC<StarCounterProps> = ({ url }) => {\n  const [starCount, setStarCount] = useState<number | undefined>();\n\n  useEffect(() => {\n    const fetchStarCount = async () => {\n      const [user, repo] = url\n        .split('/')\n        .slice(1)\n        .slice(-2);\n      const API_URL = `https://api.github.com/repos/${user}/${repo}`;\n      const resp = await fetch(API_URL);\n\n      if (!resp.ok) {\n        throw new Error(`${resp.status} ${resp.statusText}`);\n      }\n\n      const data = await resp.json();\n      console.log(data);\n      setStarCount(data.stargazers_count);\n    };\n    fetchStarCount();\n  }, []);\n\n  if (starCount === undefined) {\n    return null;\n  }\n\n  const valign = { verticalAlign: 'middle' };\n\n  return (\n    <a href={url}>\n      <Icon name=\"github\" size=\"large\" style={valign} />\n      <span style={{ verticalAlign: 'middle' }}>{starCount}</span>\n      <Icon name=\"star\" size=\"small\" style={{ marginLeft: 5 }} />\n    </a>\n  );\n};\n\nexport default GitHubLink;\n","import React from 'react';\nimport { Header as SemHeader, Menu } from 'semantic-ui-react';\nimport StarCounter from './StarCounter';\nimport { KAGGLE_BLUE, KAGGLE_GRAY } from './constants';\n\nconst Header: React.SFC = () => (\n  <Menu borderless inverted fixed=\"top\" size=\"massive\" style={{ backgroundColor: KAGGLE_GRAY }}>\n    <Menu.Item>\n      <SemHeader style={{ color: KAGGLE_BLUE, fontWeight: 'bold' }}>Kaggle Solutions</SemHeader>\n    </Menu.Item>\n    {/* Render as an anchor tag to enable highlighting on hover. */}\n    <Menu.Item position=\"right\" as=\"a\">\n      <StarCounter url=\"https://github.com/harupy/kaggle-solutions\" />\n    </Menu.Item>\n  </Menu>\n);\n\nexport default Header;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport CompetitionsTable from './CompetitionsTable';\nimport Header from './Header';\n\nconst App: React.FC = () => (\n  <div>\n    <Header />\n    <Container fluid style={{ paddingTop: 80, paddingLeft: 10, paddingRight: 10 }}>\n      <CompetitionsTable />\n    </Container>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}