{"version":3,"sources":["constants.ts","AuthorPopup.tsx","SolutionsList.tsx","TagsList.tsx","CompetitionsTable.tsx","utils.ts","TweetButton.tsx","StarCounter.tsx","Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["REPO_URL","GH_PAGES_URL","AuthorPopup","children","solution","authorName","authorId","avatarImage","authorUrl","avatarUrl","renderContent","style","textAlign","alt","src","height","width","href","Popup","trigger","content","position","hoverable","SolutionsList","competitionUrl","solutions","List","map","sol","key","discussionId","Item","title","TagsList","categories","Label","Group","name","CompetitionsTable","competitions","data","useState","searchTerm","setSearchTerm","mapper","rewardDisplay","evaluationMetric","enabledDate","deadline","Input","label","onChange","event","preventDefault","target","value","Message","compact","positive","size","marginLeft","Table","celled","Header","Row","Object","values","val","idx","HeaderCell","undefined","Body","filter","comp","competitionTitle","toLowerCase","includes","competitionId","dateString","Date","now","parse","Cell","thumbnailImageUrl","rel","keys","isDateKey","slice","formatDate","TweetButton","url","encoded","encodeURI","Icon","StarCounter","starCount","setStarCount","useEffect","a","async","split","user","repo","API_URL","fetch","resp","ok","Error","status","statusText","json","stargazers_count","fetchStarCount","verticalAlign","iconStyle","padding","Menu","borderless","inverted","fixed","backgroundColor","link","color","fontWeight","App","Container","fluid","paddingTop","paddingLeft","paddingRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e04eeda8.chunk.js","sourcesContent":["// GitHub information.\nexport const USER_NAME = 'harupy';\nexport const REPO_NAME = 'kaggle-solutions';\nexport const REPO_URL = `https://github.com/${USER_NAME}/${REPO_NAME}`;\nexport const GH_PAGES_URL = `https://${USER_NAME}.github.io/${REPO_NAME}`;\n\n// Colors to style components.\nexport const KAGGLE_BLUE = '#20BEFF';\nexport const KAGGLE_GRAY = 'rgba(0, 0, 0, 0.7)';\n\n// Kaggle URLs.\nexport const KAGGLE_URL = 'https://kaggle.com';\nexport const AVATAR_URL = 'https://storage.googleapis.com/kaggle-avatars/thumbnails';\n","import React from 'react';\nimport { Popup } from 'semantic-ui-react';\nimport { Solution } from './CompetitionsTable';\nimport { KAGGLE_URL, AVATAR_URL } from './constants';\n\ninterface AuthorPopupProps {\n  children: React.ReactNode;\n  solution: Solution;\n}\n\nconst AuthorPopup: React.SFC<AuthorPopupProps> = ({ children, solution }) => {\n  const { authorName, authorId, avatarImage } = solution;\n  const authorUrl = `${KAGGLE_URL}/${authorId}`;\n  const avatarUrl = `${AVATAR_URL}/${avatarImage}`;\n\n  const renderContent = (\n    <div style={{ textAlign: 'center' }}>\n      <img alt={authorName} src={avatarUrl} style={{ height: 64, width: 64 }} />\n      <br />\n      <a href={authorUrl}>{authorName}</a>\n    </div>\n  );\n\n  return <Popup trigger={children} content={renderContent} position=\"left center\" hoverable />;\n};\n\nexport default AuthorPopup;\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport AuthorPopup from './AuthorPopup';\nimport { KAGGLE_URL } from './constants';\nimport { Solution } from './CompetitionsTable';\n\ninterface SolutionsListProps {\n  competitionUrl: string;\n  solutions: Solution[];\n}\n\nconst SolutionsList: React.SFC<SolutionsListProps> = ({ competitionUrl, solutions }) => {\n  return (\n    <List>\n      {solutions.map(sol => (\n        <AuthorPopup key={`${competitionUrl}-${sol.discussionId}`} solution={sol}>\n          <List.Item>\n            <a href={`${KAGGLE_URL}${competitionUrl}/discussion/${sol.discussionId}`}>\n              {sol.title}\n            </a>\n          </List.Item>\n        </AuthorPopup>\n      ))}\n    </List>\n  );\n};\n\nexport default SolutionsList;\n","import React from 'react';\nimport { Label } from 'semantic-ui-react';\nimport { Category } from './CompetitionsTable';\n\ninterface TagsListProps {\n  categories: Category[];\n}\n\nconst TagsList: React.SFC<TagsListProps> = ({ categories }) => {\n  return (\n    <Label.Group>\n      {categories.map(({ name }) => (\n        <Label key={name}>{name}</Label>\n      ))}\n    </Label.Group>\n  );\n};\n\nexport default TagsList;\n","import React, { useState } from 'react';\nimport data from './competitions.json';\nimport { Table, Input, Message } from 'semantic-ui-react';\n\nimport SolutionsList from './SolutionsList';\nimport TagsList from './TagsList';\nimport { formatDate, isDateKey, isDateOver } from './utils';\n\nexport interface Solution {\n  title: string;\n  discussionId: number;\n  authorName: string;\n  authorId: string;\n  avatarImage: string;\n}\n\nexport interface Category {\n  name: string;\n  tagUrl: string;\n}\ninterface Competition {\n  [key: string]: any;\n  competitionTitle: string;\n  competitionUrl: string;\n  competitionId: number;\n  thumbnailImageUrl: string;\n  rewardDisplay: string;\n  evaluationMetric: string;\n  enabledDate: string;\n  deadline: string;\n  totalTeams: number;\n  categories: {\n    categories: Category[];\n  };\n  solutions?: Solution[];\n}\n\nconst CompetitionsTable: React.FC = () => {\n  const competitions: Competition[] = [...data];\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const mapper: { [key: string]: string } = {\n    rewardDisplay: 'Reward [USD]',\n    evaluationMetric: 'Metric',\n    enabledDate: 'Start',\n    deadline: 'End',\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    event.preventDefault();\n    setSearchTerm(event.target.value);\n  };\n\n  const search = (): Competition[] =>\n    competitions.filter(comp => {\n      return comp.competitionTitle.toLowerCase().includes(searchTerm.toLowerCase());\n    });\n\n  return (\n    <div>\n      <Input label=\"Search Competition\" onChange={handleChange} />\n      <Message compact positive size=\"mini\" style={{ marginLeft: 10 }}>\n        Colored competitions are ongoing.\n      </Message>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            {['Logo', 'Title', 'Tags', 'Solutions', ...Object.values(mapper)].map((val, idx) => (\n              <Table.HeaderCell textAlign={idx === 0 ? 'center' : undefined} key={val}>\n                {val}\n              </Table.HeaderCell>\n            ))}\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {search().map(comp => (\n            <Table.Row key={comp.competitionId} positive={!isDateOver(comp.deadline)}>\n              {/* competition logo */}\n              <Table.Cell textAlign=\"center\">\n                <img src={comp.thumbnailImageUrl} alt=\"\" style={{ height: 100 }} />\n              </Table.Cell>\n              {/* competition link */}\n              <Table.Cell>\n                {/* Note that `competitionUrl` starts with \"/\" */}\n                <a\n                  href={`https://kaggle.com${comp.competitionUrl}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {comp.competitionTitle}\n                </a>\n              </Table.Cell>\n              <Table.Cell>\n                <TagsList categories={comp.categories.categories} />\n              </Table.Cell>\n              <Table.Cell style={{ width: 200 }}>\n                <SolutionsList\n                  competitionUrl={comp.competitionUrl}\n                  solutions={comp.solutions ? comp.solutions : []}\n                />\n              </Table.Cell>\n              {Object.keys(mapper).map(key => (\n                <Table.Cell key={key}>\n                  {isDateKey(key) ? formatDate(comp[key]) : comp[key]}\n                </Table.Cell>\n              ))}\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default CompetitionsTable;\n","/**\n * Extract yyyy-mm-dd.\n * @param  {string} dateString date string to format.\n * @return {string} Formatted date string.\n */\nexport const formatDate = (dateString: string): string => {\n  return dateString.slice(0, 10);\n};\n\n/**\n * Return true if the given key is 'deadline' or 'enabledDate'.\n * @param  {string} key key to check.\n * @return {boolean}\n */\nexport const isDateKey = (key: string): boolean => {\n  return ['deadline', 'enabledDate'].includes(key);\n};\n\n/**\n * Return the base name of the given path or url.\n * @param  {string} s File path or URL.\n * @return {string} Base name.\n */\nexport const basename = (s: string): string | undefined => {\n  return s.split(/[\\\\/]/).pop();\n};\n\n/**\n * Check if the given date time is over.\n * @param {string} dateString Date string to check.\n * @return {boolean} True if the given date time is over.\n */\n\nexport const isDateOver = (dateString: string): boolean => {\n  return Date.now() >= Date.parse(dateString);\n};\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\ninterface TweetButtonProps {\n  url: string;\n}\n\nconst TweetButton: React.SFC<TweetButtonProps> = ({ url }) => {\n  // Insert a carriage return to make it easier for users to add comments.\n  const encoded = encodeURI(`\\r\\n${url}`);\n  return (\n    <a href={`https://twitter.com/intent/tweet?text=${encoded}`}>\n      <Icon name=\"twitter\" size=\"large\" />\n    </a>\n  );\n};\n\nexport default TweetButton;\n","import React, { useState, useEffect } from 'react';\nimport { Icon } from 'semantic-ui-react';\n\ninterface StarCounterProps {\n  url: string;\n}\n\nconst StarCounter: React.FC<StarCounterProps> = ({ url }) => {\n  const [starCount, setStarCount] = useState<number | undefined>();\n\n  // Fetch stargazers count GitHub using the GitHub REST API.\n  const fetchStarCount = async () => {\n    const [user, repo] = url\n      .split('/')\n      .slice(1)\n      .slice(-2);\n    const API_URL = `https://api.github.com/repos/${user}/${repo}`;\n    const resp = await fetch(API_URL);\n\n    if (!resp.ok) {\n      throw new Error(`${resp.status} ${resp.statusText}`);\n    }\n\n    const data = await resp.json();\n    setStarCount(data.stargazers_count);\n  };\n\n  useEffect(() => {\n    fetchStarCount();\n  }, []);\n\n  if (starCount === undefined) {\n    return null;\n  }\n\n  const valign = { verticalAlign: 'middle' };\n\n  return (\n    <a href={url}>\n      <Icon name=\"github\" size=\"large\" style={valign} />\n      <span style={{ verticalAlign: 'middle' }}>{starCount}</span>\n      <Icon name=\"star\" size=\"small\" style={{ marginLeft: 5 }} />\n    </a>\n  );\n};\n\nexport default StarCounter;\n","import React from 'react';\nimport { Header as SemHeader, Menu } from 'semantic-ui-react';\nimport TweetButton from './TweetButton';\nimport StarCounter from './StarCounter';\nimport { REPO_NAME, REPO_URL, GH_PAGES_URL, KAGGLE_BLUE, KAGGLE_GRAY } from './constants';\n\nconst Header: React.SFC = () => {\n  const iconStyle = {\n    padding: 10,\n  };\n\n  return (\n    <Menu borderless inverted fixed=\"top\" size=\"massive\" style={{ backgroundColor: KAGGLE_GRAY }}>\n      {/* Add link to highlight menu items when they are hovered. */}\n      <Menu.Item link>\n        <SemHeader>\n          <a href={`/${REPO_NAME}`} style={{ color: KAGGLE_BLUE, fontWeight: 'bold' }}>\n            Kaggle Solutions\n          </a>\n        </SemHeader>\n      </Menu.Item>\n      <Menu.Item link position=\"right\" style={iconStyle}>\n        <TweetButton url={GH_PAGES_URL} />\n      </Menu.Item>\n      <Menu.Item link style={iconStyle}>\n        <StarCounter url={REPO_URL} />\n      </Menu.Item>\n    </Menu>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Container } from 'semantic-ui-react';\nimport CompetitionsTable from './CompetitionsTable';\nimport Header from './Header';\n\nconst App: React.FC = () => (\n  <div>\n    <Header />\n    <Container fluid style={{ paddingTop: 80, paddingLeft: 10, paddingRight: 10 }}>\n      <CompetitionsTable />\n    </Container>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}